package bn128_bls

import (
	"fmt"
	"math/big"
	"testing"
)

const (
	tempMessageX = "2f83ab0505ec1a04e956486a83fa965e0461419f5dcf4016512eb3a769600290"
	tempMessageY = "0a5a0716aa9abf7094296b7f0ebfda7d0d9f179bd989797b78702ed83f02c5db"
)

var bls *BLS = NewBls()

func TestRandKeyPairGeneration(t *testing.T) {
	fmt.Println("Checking Rand KeyPair")
	randKeyPair, _ := bls.GenerateRandomKeyPair()
	fmt.Printf("PrivateKey: %s\n\n", randKeyPair.PrivateKey.Text(16))
	fmt.Printf("PubKey: %#v\n\n", bls.ParsePubKey(randKeyPair.PubKey))
	fmt.Println(bls.GenerateSignature(randKeyPair, tempMessageX, tempMessageY))
}

func TestExistingKeyPair(t *testing.T) {
	fmt.Println("Checking Existing KeyPair")
	existingKeyPair, _ := bls.NewKeyPair("cb7b14116125dcd2b99e5db4f95ff277c6e46c7b3302b4efa389af0d7801672f")
	fmt.Printf("PrivateKey: %s\n\n", existingKeyPair.PrivateKey.Text(16))
	fmt.Printf("PubKey: %#v\n\n", bls.ParsePubKey(existingKeyPair.PubKey))
	signature, _ := bls.GenerateSignature(existingKeyPair, tempMessageX, tempMessageY)
	fmt.Println("Signature: ", signature)
	fmt.Println(bls.VerifySignature(signature, existingKeyPair.PubKey, tempMessageX, tempMessageY))
}

func TestPubKeyAndSignatureAggregation(t *testing.T) {
	fmt.Println("Checking Aggregated PubKey And Signature")
	keyPair1, _ := bls.NewKeyPair("c18319a8f7638cd906b5e76ea0dd289a9c111fd98184bca3a727895626eba655")
	keyPair2, _ := bls.NewKeyPair("f0fd54e344e3c9f4064fa28ba70251fcfd71cc93a0839d2ccfa03b7c5e5d92ef")
	keyPair3, _ := bls.NewKeyPair("f84070afbedd4dc532ae39668b2d07856b08332cfae988199268fff1cbe960d3")
	keyPair4, _ := bls.NewKeyPair("d2e9a2e3d5915979a525af822388474521781c7925d3c238da3883207d758715")

	fmt.Printf("\nPubKeys:\n%v\n %v\n %v\n %v\n",
		bls.ParsePubKey(keyPair1.PubKey),
		bls.ParsePubKey(keyPair2.PubKey),
		bls.ParsePubKey(keyPair3.PubKey),
		bls.ParsePubKey(keyPair4.PubKey))

	aggregatedPubKeyG1, aggregatedPubKeyG2, _ := bls.AggregatePubKeys([][3]*big.Int{
		keyPair1.PubKeyG1,
		keyPair2.PubKeyG1,
		keyPair3.PubKeyG1,
		keyPair4.PubKeyG1,
	}, [][3][2]*big.Int{
		keyPair1.PubKey,
		keyPair2.PubKey,
		keyPair3.PubKey,
		keyPair4.PubKey,
	})
	fmt.Println("AggregatedG1: ", bls.ParsePubKeyG1(aggregatedPubKeyG1))
	fmt.Println("AggregatedG2: ", bls.ParsePubKey(aggregatedPubKeyG2))

	signature1, _ := bls.GenerateSignature(keyPair1, tempMessageX, tempMessageY)
	signature2, _ := bls.GenerateSignature(keyPair2, tempMessageX, tempMessageY)
	signature3, _ := bls.GenerateSignature(keyPair3, tempMessageX, tempMessageY)
	signature4, _ := bls.GenerateSignature(keyPair4, tempMessageX, tempMessageY)
	fmt.Printf("\nSignatures:\n%v\n %v\n %v\n %v\n",
		bls.ParseSignature(signature1),
		bls.ParseSignature(signature2),
		bls.ParseSignature(signature3),
		bls.ParseSignature(signature4))

	aggregatedSignature, _ := bls.AggregateSignatures([][3]*big.Int{
		signature1,
		signature2,
		signature3,
		signature4,
	})
	fmt.Println("AggregatedSignature: ", bls.ParseSignature(aggregatedSignature))
	fmt.Println(bls.VerifySignature(aggregatedSignature, aggregatedPubKeyG2, tempMessageX, tempMessageY))

	/*
		Expected Result:
			PubKeys:
				[[20974559747299879413556039419259214614664588637782364818309997166583318134304, 16705806154884036948948646886163223998054164444128401088043216055551478267243, 8754428760654502872442774021568608245065791389356113589183673000850646532636, 2860187259860646459151799722818505203249146712948477974293952930589158118836],
				[20748691956959799169190441925930435008492452225795489554281138395126821166815, 10961045149090398335460969769025870631678016320512142478630014172049097697236, 4565807984650030920677256322376657444601513496748926897891094903293384651572, 15449847372673003576684454789547938272263265190512866824193214565114070199215],
				[21261537333397474785134926516837919917049040134244972360418206454933522180461, 2611191651845889698224973407773432846115377842461115075884953775286386031410, 8522111455596187358960213543471051604672155791898630853436397359762823566426, 10048727530601833677324319694704458280876360557423077219065453675813486432458],
				[5451541735220129466343261346517758687951504791072845488135496630836334202764, 10129159670987402786317064855639225739706261499450581714774888081331075091717, 5353074025703194661131576725366875865694338851953714186189515516770131923941, 7991555140528316468539338251964986155877708015431477646567906479405974641312]]

			AggregatedG1: [16156623451944861821494192630644886305664238818711513553529857781059709270507, 20722297295020073846730068442196276412101924736472867938434917352229517081088]
			AggregatedG2: [13688607365849032847914905329616656454454732854634399954899255601221445478174, 14615303862058433969894885471990978758715419563919524142947307900181137491676, 8486343162443502130501873490626994255652142153134071386466280307613979287147, 5761486712871304482060449256720050472792594623672842369280636694198098292557]

			Signatures:
				[[1416048395743072571805528497038988088555854302720701165265543957702895151421, 11835587576781796187937013743083029311571454197412297920673442159367724982692],
				[18282072570817416076440227940860657611595367664987809646552517863193618447932 12810804172688543327448416984125771435133039828248184189924977053399912940472],
				[10785141442177147359002915510727153673539136828877393761638566201487033029464 3929156098620366949726184140299025192507831353862866471208843091973210554816],
				[3403662145904275732987851688393630908410623872125352554234276197269292859830 16788087537013042380234910113088482649043822407328281189739782299480997896688]]

			AggregatedSignature: [16593705459026543146832688299239814747475787989254688268888935665365930841528, 2478149669898480645468538991451985826367772200571642284116560599822335517624]
	*/
}

// func TestTemp(t *testing.T) {
// 	keyPair1, _ := bls.NewKeyPair("c18319a8f7638cd906b5e76ea0dd289a9c111fd98184bca3a727895626eba655")
// 	// keyPair2, _ := bls.NewKeyPair("f0fd54e344e3c9f4064fa28ba70251fcfd71cc93a0839d2ccfa03b7c5e5d92ef")
// 	// keyPair3, _ := bls.NewKeyPair("f84070afbedd4dc532ae39668b2d07856b08332cfae988199268fff1cbe960d3")
// 	// keyPair4, _ := bls.NewKeyPair("d2e9a2e3d5915979a525af822388474521781c7925d3c238da3883207d758715")

// 	fmt.Println("PubKey:", keyPair1.PubKey)
// 	pubKey := bls.ParsePubKey(keyPair1.PubKey)
// 	fmt.Println("Parsed PubKey", pubKey)

// 	fmt.Println(bls.NewG2([2][2]*big.Int{
// 		{pubKey[0], pubKey[1]},
// 		{pubKey[2], pubKey[3]},
// 	}))
// }
